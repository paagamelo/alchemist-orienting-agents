@startuml

interface Pedestrian<T> {
  +PedestrianGroup<T> membershipGroup
  +Double speed()
}

interface Pedestrian #white

interface OrientingPedestrian<T, \nV : Vector<V>, \nA : GeometricTransformation<V>, \nN : ConvexGeometricShape<V, A>, \nE : GraphEdge<N>>

Pedestrian <|-- OrientingPedestrian

class HomogeneousPedestrianImpl<T, P : Position<P>> #white

abstract class AbstractOrientingPedestrian<T, \nP : Position<P>, Vector<P>, \nA : GeometricTransformation<P>, \nN : ConvexGeometricShape<P, A>, \nM: ConvexGeometricShape<P, A>, \nF : GraphEdge<M>> {
  -NavigationGraph<P, A, M, F> environmentGraph
  {abstract} #N generateLandmarkWithin(M)
}
note left: Contains an algorithm capable of \ngenerating a cognitive map provided \na navigation graph describing the \nenvironment, M and F are the \ntype of nodes and edges of such \ngraph, respectively. The generation \nof landmarks within walkable areas \nis left to subclasses because it \ndepends on the particular space.

Pedestrian <|.. HomogeneousPedestrianImpl

OrientingPedestrian <|.. AbstractOrientingPedestrian : <<bind>> \nV -> P, \nE -> GraphEdge<N>
note on link: E is bound to GraphEdge<N> \nbecause the algorithm for \nthe automatic generation of \nthe cognitive map does not \nstore any extra information \nregarding the connection \nbetween landmarks

HomogeneousPedestrianImpl <|-- AbstractOrientingPedestrian

class OrientingPedestrian2D<T, \nM : ConvexPolygon, \nF : GraphEdge<M>> {
  #Ellipse generateLandmarkWithin(M)
}

AbstractOrientingPedestrian <|-- OrientingPedestrian2D : <<bind>> \nP -> Euclidean2DPosition, \nA -> Euclidean2DTransformation, \nN -> Ellipse

class OrientingHomogeneousPedestrian2D<T, \nM : ConvexPolygon, \nF : GraphEdge<M>>

OrientingPedestrian2D <|-- OrientingHomogeneousPedestrian2D

interface OrientingCognitivePedestrian<T, \nV : Vector<V>, \nA : GeometricTransformation<V>, \nN : ConvexGeometricShape<V, A>, \nE : GraphEdge<N>>

class OrientingCognitivePedestrian2D<T, \nM : ConvexPolygon, \nF : GraphEdge<M>>

OrientingPedestrian2D <|-- OrientingCognitivePedestrian2D

OrientingCognitivePedestrian <|.. OrientingCognitivePedestrian2D : <<bind>> \nV -> Euclidean2DPosition, \nA -> Euclidean2DTransformation, \nN -> Ellipse, \nE -> GraphEdge<Ellipse>

class CognitivePedestrianImpl<T, P : Position<P>> #white

CognitivePedestrianImpl --* OrientingCognitivePedestrian2D : <<bind>> \nP -> Euclidean2DPosition

OrientingPedestrian <|-- OrientingCognitivePedestrian

@enduml
