@startuml

interface Reaction<T> #white

abstract class AbstractOrientingBehavior<T, \nP : Position<P>, Vector<P>, \nA : GeometricTransformation<P>, \nN : ConvexGeometricShape<P, A>, \nE : GraphEdge<N>, \nM: ConvexGeometricShape<P, A>, \nF : GraphEdge<M>> {
  -NavigationGraph<P, A, M, F> environmentGraph
  -OrientingPedestrian<T, P, A, N, E> pedestrian
  {abstract} #Map<F, Int> computeEdgeRankings(currRoom: M, destination: P)
  {abstract} #P computeSubdestination(targetEdge: F)
}
note right: N and E are the type of nodes and edges of \nthe pedestrian's cognitive map, M and F the \ntype of nodes and edges of the environment \ngraph

class OrientingBehavior2D<T, \nN : ConvexEuclidean2DShape, \nE : GraphEdge<N>, \nM: ConvexPolygon, \nF : GraphEdgeWithData<M, Euclidean2DSegment>> {
  #Map<F, Int> computeEdgeRankings(currRoom: M, destination: Euclidean2DPosition)
  #Euclidean2DPosition computeSubdestination(targetEdge: F)
}

Reaction <|.. AbstractOrientingBehavior

AbstractOrientingBehavior <|-- OrientingBehavior2D : <<bind>> \nP -> Euclidean2DPosition, \nA -> Euclidean2DTransformation

class OrientingSteeringBehavior2D<T, \nN : ConvexEuclidean2DShape, \nE : GraphEdge<N>, \nM: ConvexPolygon, \nF : GraphEdgeWithData<M, Euclidean2DSegment>> {
  -List<SteeringAction> steerActions
}
note right: Mixes steering behavior and orienting \nbehavior smartly

OrientingBehavior2D <|-- OrientingSteeringBehavior2D

@enduml
